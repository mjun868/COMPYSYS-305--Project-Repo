library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity tb_BCD_Counter is
end tb_BCD_Counter;

architecture behavior of tb_BCD_Counter is
    -- Testbench signals
    signal tb_clk       : std_logic := '0';
    signal tb_reset     : std_logic := '0';
    signal tb_enable    : std_logic := '0';
    signal tb_direction : std_logic := '0';
    signal tb_Q_Out     : std_logic_vector(3 downto 0);

    -- Instantiate the Unit Under Test (UUT)
    component BCD_Counter is
        Port (
            Clk       : in  std_logic;
            Reset     : in  std_logic;
            Enable    : in  std_logic;
            Direction : in  std_logic;
            Q_Out     : out std_logic_vector(3 downto 0)
        );
    end component;

    constant CLK_PERIOD : time := 10 ns;
begin

    UUT: BCD_Counter 
        port map (
            Clk       => tb_clk,
            Reset     => tb_reset,
            Enable    => tb_enable,
            Direction => tb_direction,
            Q_Out     => tb_Q_Out
        );

    -- Clock generation process: 100 MHz clock
    clock_process : process
    begin
        while true loop
            tb_clk <= '0';
            wait for CLK_PERIOD / 2;
            tb_clk <= '1';
            wait for CLK_PERIOD / 2;
        end loop;
    end process;

    -- Stimulus process to test the counter functionality.
    stimulus_process : process
    begin
        -----------------------------------------------------------------
        -- Test Up Counter Operation (Direction = '1')
        -----------------------------------------------------------------
        tb_direction <= '1';   -- Set to up counter mode
        tb_enable    <= '0';
        tb_reset     <= '1';   -- Assert reset: initializes count to 0
        wait for CLK_PERIOD;
        tb_reset     <= '0';
        tb_enable    <= '1';
        -- Let the counter run for a few cycles (should count 0,1,2,...,9 then wrap to 0)
        wait for 100 ns;
        
        -- Freeze the counter (Enable = '0')
        tb_enable    <= '0';
        wait for 50 ns;
        tb_enable    <= '1';
        wait for 50 ns;

        -----------------------------------------------------------------
        -- Test Down Counter Operation (Direction = '0')
        -----------------------------------------------------------------
        tb_direction <= '0';   -- Set to down counter mode
        tb_reset     <= '1';   -- Assert reset: initializes count to 9
        wait for CLK_PERIOD;
        tb_reset     <= '0';
        -- Let the counter run for a few cycles (should count 9,8,7,...,0 then wrap to 9)
        wait for 100 ns;

        -- Freeze the counter (Enable = '0') and then re-enable.
        tb_enable    <= '0';
        wait for 50 ns;
        tb_enable    <= '1';
        wait for 50 ns;

        -- End simulation.
        wait;
    end process;

end architecture behavior;


