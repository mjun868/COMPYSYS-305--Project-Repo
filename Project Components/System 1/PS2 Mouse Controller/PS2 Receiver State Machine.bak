library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_numeric.all;


--Purpose:
-- Turns the raw PS/2 clock and data lines into a clean 11-bit "frame".

entity PS2_receiver_State_Machine is
   port(
      sys_clk : in std_logic; -- System Clock.
      reset_n : in std_logic; -- Active Low Reset.
      ps2_clk : in std_logic; -- The raw PS/2 clock.
      ps2_data : in std_logic; -- The raw input of PS/2.
      data_out : out std_logic_vector(7 downto 0); -- Processed output.
      data_valid : out std_logic; --One cycle pulse when byte is valid.
      framing_error: out_std_logic --High if start/parity/stop bit failed. 
);
end entity PS2_receiver_State_Machine;

architecture RSM of P2S_receiver_State_Machine is 

-- Two synchronizers on ps2_clk and ps2_data each to tame metastability.
   signal sync_clk_0 : std_logic := '1';
   signal sync_clk_1 : std_logic := '1';
   signal sync_data_0 : std_logic := '1';
   signal sync_data_1 : std_logic := '1';

-- Edge detection
   signal ps2_clk_prev : std_logic :- '1';
   signal ps2_clock_fall : std_logic; 

--Frame assembly 
   signal bit_count : unsigned(3 downto 0) := (others => '0'); -- counts 0...10
   signal shift_reg : std_logic_vector(10 downto 0) := (others => '0'); -- the shift register where the output will be built. 

--Output registersignal byte_reg : std_logic_vector(7 downto 0 );
   signal valid_reg : std_logic := '0';
   signal error_reg : std_logic := '0';

begin

-- Synchronize PS/2 clock & data into sys_clk domain of the FPGA. 
process(sys_clk)
   begin 
      if rising_edge(sys_clk) then
         sync_clk_0 <= ps2_clk;
         sync_clk_1 <= sync_clk_0; --Note the double FF. 
         sync_data_0 <= ps2_data;
         sync_data_1 <= sync_data_0;
       end if 
end process;

--Now that the PS/2 inputs have been synchronized, detect the falling edge of the PS/2 Clock. 
ps2_clock_fall <= ps2_clk_prev and not sync_clk_1; 
process(sys_clk)
   begin
      if rising_edge(sys_clk) then
          ps2_clk_prev <= sync_clk_1;
      end if;
end process; 


-- Build the byte that will be sent to the Packet Assembler. 

process(sys_clk,reset_n)
   begin
      if reset_n = '0' then
          bit_count <= (others => '0');
          shift_reg <= (others => '0');
          byte_reg <= (others => '0');
          valid_reg <= '0';
          error_reg <= '0';
      elsf rising_edge(sys_clk) then 
          valid_reg <= '0'; -- default: no valid pulse.
          error_reg <= '0'; --default : no error.
          
          if ps2_clk_fall = '1' then
          shift_reg(bit_count) <= sync_data_1; -- Shift in the sampled data bit. 

             if bit_count = to_unsigned(10, bit_count'length) then
                if shift_reg(0) = '0' and shift(10) = '1' and (shift(1)xor shift(2) xor shift(3) xor shift(4)xor shift(5) xor shift(6)xor shift(7)xor shift(8)xor shift(9)) = '1'
                   then 
                      bye_reg <= shift_reg(8 downto 1);
                      valid_reg <= '1'l
                   else
                       error_reg <= '1'
                 end if;
                 bit_count <= (others => '0'); 
              else
                 bit_count <= bit_count + 1;
              end if;
           end if;
        end if;
     end if;
end process;

data_out <= byte_reg;
data_valid <= valid_reg;
framing_Error <= error_reg;

end architecture RSM;
          

  





















end architecture RSM; 



