library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
-- Optionally include TEXTIO if you plan to use file or console output.

entity Programmable_Timer_tb is
-- Test bench has no ports.
end Programmable_Timer_tb;

architecture tb of Programmable_Timer_tb is

   -- Component declaration for the Programmable_Timer.
   component Programmable_Timer is
      Port ( 
         Clk             : in  std_logic;
         GlobalReset     : in  std_logic;
         Start           : in  std_logic;
         Data_In         : in  std_logic_vector(9 downto 0);
         Time_Out        : out std_logic;
         SevenSeg_Min    : out std_logic_vector(6 downto 0);
         SevenSeg_SecTens: out std_logic_vector(6 downto 0);
         SevenSeg_SecOnes: out std_logic_vector(6 downto 0)
      );
   end component;

   -------------------------------------------------------------------
   -- Signal Declarations
   -------------------------------------------------------------------
   signal clk           : std_logic := '0';
   signal global_reset  : std_logic := '1';
   signal start         : std_logic := '0';
   signal data_in       : std_logic_vector(9 downto 0) := (others => '0');
   signal time_out      : std_logic;
   signal seven_seg_min : std_logic_vector(6 downto 0);
   signal seven_seg_sectens : std_logic_vector(6 downto 0);
   signal seven_seg_secones : std_logic_vector(6 downto 0);

   -- 50 MHz clock period: 20 ns period.
   constant clk_period : time := 20 ns;

begin

   -------------------------------------------------------------------
   -- Instantiate the Programmable_Timer (Device Under Test)
   -------------------------------------------------------------------
   DUT: Programmable_Timer
      port map (
         Clk             => clk,
         GlobalReset     => global_reset,
         Start           => start,
         Data_In         => data_in,
         Time_Out        => time_out,
         SevenSeg_Min    => seven_seg_min,
         SevenSeg_SecTens=> seven_seg_sectens,
         SevenSeg_SecOnes=> seven_seg_secones
      );

   -------------------------------------------------------------------
   -- Clock Generation Process: Generate a 50 MHz board clock.
   -------------------------------------------------------------------
   clk_process : process
   begin
      while true loop
         clk <= '0';
         wait for clk_period/2;
         clk <= '1';
         wait for clk_period/2;
      end loop;
      wait;
   end process;

   -------------------------------------------------------------------
   -- Stimulus Process
   --
   -- This process applies the following test steps:
   -- 1. Hold GlobalReset for a short time (100 ns) and then release.
   -- 2. Drive Data_In with a preset for 0 minutes and 3 seconds.
   --    (Data_In: bits [9:8]="00" gives 0 minutes;
   --     bits [7:4]="0000" give seconds tens; and
   --     bits [3:0]="0011" give seconds ones.)
   -- 3. Generate a pulse on Start to load the preset into the timer.
   -- 4. Wait long enough for the timer to count up to 0:03.
   -- 5. Assert that Time_Out has gone high.
   --
   -- Note: In an actual simulation the one-Hz clock may be produced by
   --       a clock divider that counts 50 million cycles. For quick
   --       simulation, consider modifying the divider to use a smaller
   --       count so that the timer advances faster.
   -------------------------------------------------------------------
   stim_proc: process
   begin
      -- Hold reset high for 100 ns.
      global_reset <= '1';
      wait for 100 ns;
      global_reset <= '0';
      
      -- Apply preset value.
      -- For preset 0:03, set Data_In = "00" & "0000" & "0011".
      data_in <= "0000000011";
      
      -- Wait a short while before starting.
      wait for 100 ns;
      
      -- Apply a one-clock-cycle pulse to Start.
      start <= '1';
      wait for clk_period;
      start <= '0';

      -- Wait long enough for the timer (running on a 1 Hz clock) to reach 3 seconds.
      -- (5 sec is used here to ensure the design has enough time to update.)
      wait for 5 sec;

      -- Check if Time_Out has been asserted.
      assert time_out = '1'
         report "Test FAILED: Timer did not time out as expected."
         severity failure;

      -- Optionally, you can add further stimulus or finish the simulation.
      wait;
   end process;

end architecture tb;


