library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity seq_counter is
    port(
        Clk    : in  std_logic;
        Reset  : in  std_logic;
        Enable : in  std_logic;
        Mode   : in  std_logic_vector(1 downto 0);
        Q      : out std_logic_vector(4 downto 0)
    );
end entity seq_counter;

architecture behaviour of seq_counter is

    -- Fix 1: Correct name and type of constant array
    type custom_array is array(0 to 6) of integer;
    constant custom_seq : custom_array := (-1, 5, 7, 13, -7, 9, -12);

    -- Fix 2: Separate signal declaration and initialization
    signal current_value : integer := 0;
    signal index         : integer range 0 to 6 := 0;  -- Added this

begin

    process(Clk, Reset)
    begin
        if Reset = '1' then
            index <= 0;
            case Mode is
                when "00" => current_value <= 1;   -- FIXED: remove quotes
                when "01" => current_value <= 12;
                when "10" => current_value <= -1;
                when others => current_value <= 31;
            end case;

        elsif rising_edge(Clk) then
            if Mode = "11" then
                current_value <= 31;

            elsif Enable = '1' then
                case Mode is
                    when "00" => -- odd count up
                        if current_value < 13 then
                            current_value <= current_value + 2;
                        else
                            current_value <= 1;
                        end if;

                    when "01" => -- even count down
                        if current_value > 4 then
                            current_value <= current_value - 2;
                        else
                            current_value <= 12;
                        end if;

                    when "10" => -- custom sequence
                        if index < custom_seq'length - 1 then
                            index <= index + 1;
                        else
                            index <= 0;
                        end if;
                        current_value <= custom_seq(index);

                    when others =>
                        current_value <= 31;
                end case;
            end if;
        end if;
    end process;

    -- Output conversion from integer to std_logic_vector
    Q <= std_logic_vector(to_signed(current_value, 5));

end architecture behaviour;